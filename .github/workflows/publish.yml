name: Publish Package

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Publish target'
        required: true
        type: choice
        options:
          - testpypi
          - pypi
        default: testpypi
      version:
        description: 'Version to publish (leave empty to use current version from pyproject.toml)'
        required: false
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run tests
      run: |
        pytest --cov=mpmsub

    - name: Lint and format check
      run: |
        flake8 mpmsub/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check mpmsub/ tests/
        mypy mpmsub/ --ignore-missing-imports --no-strict-optional --allow-untyped-defs || echo "MyPy found issues but continuing..."

  publish-manual:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.target }}
      url: ${{ github.event.inputs.target == 'pypi' && 'https://pypi.org/p/mpmsub' || 'https://test.pypi.org/p/mpmsub' }}
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
      contents: write  # IMPORTANT: this permission is mandatory for creating releases

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Update version if specified
      if: github.event.inputs.version != ''
      run: |
        sed -i 's/version = ".*"/version = "${{ github.event.inputs.version }}"/' pyproject.toml
        echo "Updated version to: ${{ github.event.inputs.version }}"

    - name: Show current version
      run: |
        CURRENT_VERSION=$(grep 'version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "Publishing version: $CURRENT_VERSION"
        echo "Target: ${{ github.event.inputs.target }}"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Publish to TestPyPI
      if: github.event.inputs.target == 'testpypi'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

    - name: Publish to PyPI
      if: github.event.inputs.target == 'pypi'
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: Get current version for release
      if: github.event.inputs.target == 'pypi'
      id: get_version
      run: |
        CURRENT_VERSION=$(grep 'version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Creating release for version: $CURRENT_VERSION"

    - name: Create GitHub Release
      if: github.event.inputs.target == 'pypi'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        body: |
          Release v${{ steps.get_version.outputs.version }}

          ## Installation

          ```bash
          pip install mpmsub==${{ steps.get_version.outputs.version }}
          ```

          ## Changes

          See the commit history for details.
        draft: false
        prerelease: false
        generate_release_notes: true
